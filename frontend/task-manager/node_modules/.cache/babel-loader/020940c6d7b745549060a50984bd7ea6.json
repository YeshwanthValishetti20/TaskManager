{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yeshw\\\\Downloads\\\\Task-manger-app-master\\\\Task-manger-app-master\\\\frontend\\\\task-manager\\\\src\\\\context\\\\tasks\\\\TaskState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport taskContext from './taskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskState = props => {\n  _s();\n  const host = \"http://localhost\";\n  const [tasks, setTasks] = useState([]);\n\n  //Fetching all tasks\n\n  const getTasks = async list_id => {\n    const response = await fetch(`${host}/lists/${list_id}/gettasks`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const json = await response.json();\n    // console.log(json);\n    setTasks(json);\n  };\n\n  // Adding a new task\n\n  const addTask = async (listId, description, dueDate) => {\n    const response = await fetch(`${host}/lists/${listId}/addtask`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        description,\n        dueDate\n      })\n    });\n    const task = await response.json();\n    // console.log(task);\n    setTasks(tasks.concat(task));\n  };\n\n  // Editing the status of the task\n\n  const editTaskStatus = async taskId => {\n    try {\n      const response = await fetch(`${host}/lists/updatetaskstatus/${taskId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          isCompleted: true\n        })\n      });\n      const json = await response.json();\n\n      //Applying the changes in the frontend\n\n      const newTasks = JSON.parse(JSON.stringify(tasks));\n      for (let i = 0; i < newTasks.length; i++) {\n        let ele = newTasks[i];\n        if (ele._id === taskId) {\n          newTasks[i].isCompleted = true;\n          break;\n        }\n      }\n      setTasks(newTasks);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //Editing the task\n\n  const editTask = async (list_id, task_id, description, dueDate) => {\n    try {\n      const response = await fetch(`${host}/lists/${list_id}/updatetask/${task_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          description,\n          dueDate\n        })\n      });\n      const json = await response.json();\n      console.log(json);\n      let newTasks = JSON.parse(JSON.stringify(tasks));\n      for (let i = 0; i < newTasks.length; i++) {\n        const ele = newTasks[i];\n        if (ele._id === task_id) {\n          newTasks[i].description = description;\n          newTasks[i].dueDate = dueDate;\n          break;\n        }\n      }\n      setTasks(newTasks);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //Deleting a task\n\n  const deleteTask = async taskId => {\n    try {\n      const response = await fetch(`${host}/lists/deletetask/${taskId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const json = await response.json();\n\n      //Applying the changes in the frontend\n\n      const newTasks = tasks.filter(task => {\n        return task._id !== taskId;\n      }); // using filter() function of javascript\n      setTasks(newTasks);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(taskContext.Provider, {\n    value: {\n      tasks,\n      getTasks,\n      addTask,\n      editTaskStatus,\n      deleteTask,\n      editTask\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskState, \"+34uIVDBalDkucWnJ7Aj1Xxb0MA=\");\n_c = TaskState;\nexport default TaskState;\nvar _c;\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"names":["React","useState","taskContext","jsxDEV","_jsxDEV","TaskState","props","_s","host","tasks","setTasks","getTasks","list_id","response","fetch","method","headers","json","addTask","listId","description","dueDate","body","JSON","stringify","task","concat","editTaskStatus","taskId","isCompleted","newTasks","parse","i","length","ele","_id","error","console","log","editTask","task_id","deleteTask","filter","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yeshw/Downloads/Task-manger-app-master/Task-manger-app-master/frontend/task-manager/src/context/tasks/TaskState.js"],"sourcesContent":["import React, { useState } from 'react'\nimport taskContext from './taskContext'\n\nconst TaskState = (props) => {\n    const host = \"http://localhost\";\n    const [tasks, setTasks] = useState([]);\n\n    //Fetching all tasks\n\n    const getTasks = async (list_id) => {\n\n\n        const response = await fetch(`${host}/lists/${list_id}/gettasks`, {\n            method: 'GET',\n\n            headers: {\n                'Content-Type': 'application/json',\n            },\n\n        });\n        const json = await response.json();\n        // console.log(json);\n        setTasks(json);\n\n    }\n\n    // Adding a new task\n\n    const addTask = async (listId, description, dueDate) => {\n\n        const response = await fetch(`${host}/lists/${listId}/addtask`, {\n            method: 'POST',\n\n            headers: {\n                'Content-Type': 'application/json',\n            },\n\n            body: JSON.stringify({ description, dueDate}),\n\n        });\n        const task = await response.json();\n        // console.log(task);\n        setTasks(tasks.concat(task));\n\n    }\n\n\n    // Editing the status of the task\n\n    const editTaskStatus = async (taskId) => {\n        try {\n\n            const response = await fetch(`${host}/lists/updatetaskstatus/${taskId}`, {\n                method: 'PATCH',\n\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n\n                body: JSON.stringify({ isCompleted: true }),\n\n            });\n            const json = await response.json();\n\n\n            //Applying the changes in the frontend\n\n            const newTasks = JSON.parse(JSON.stringify(tasks));\n            for (let i = 0; i < newTasks.length; i++) {\n                let ele = newTasks[i];\n                if (ele._id === taskId) {\n                    newTasks[i].isCompleted = true;\n                    break;\n                }\n            }\n            setTasks(newTasks);\n\n        } catch (error) {\n            console.log(error);\n        }\n\n\n    }\n\n    //Editing the task\n\n    const editTask = async (list_id,task_id ,description,dueDate) => {\n\n        try {\n\n            const response = await fetch(`${host}/lists/${list_id}/updatetask/${task_id}`, {\n                method: 'PUT',\n\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n\n                body: JSON.stringify({ description,dueDate }),\n\n            });\n            const json = await response.json();\n            console.log(json);\n\n            let newTasks = JSON.parse(JSON.stringify(tasks))\n            for (let i = 0; i < newTasks.length; i++) {\n                const ele = newTasks[i];\n                if (ele._id === task_id) {  \n                    newTasks[i].description = description;\n                    newTasks[i].dueDate = dueDate;\n                    break;\n                }\n\n            }\n            setTasks(newTasks);\n\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n    //Deleting a task\n\n    const deleteTask = async (taskId) => {\n\n        try {\n\n            const response = await fetch(`${host}/lists/deletetask/${taskId}`, {\n                method: 'DELETE',\n\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n            const json = await response.json();\n\n             //Applying the changes in the frontend\n\n            const newTasks = tasks.filter((task) => { return task._id !== taskId })  // using filter() function of javascript\n            setTasks(newTasks);\n\n        } catch (error) {\n            console.log(error);\n        }\n\n       \n\n\n\n    }\n\n    return (\n        <taskContext.Provider value={{ tasks, getTasks, addTask, editTaskStatus, deleteTask,editTask }}>\n            {props.children}\n        </taskContext.Provider>\n    )\n}\n\n\n\nexport default TaskState"],"mappings":"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"},"metadata":{},"sourceType":"module"}