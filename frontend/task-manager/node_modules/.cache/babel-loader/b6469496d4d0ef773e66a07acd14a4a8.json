{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yeshw\\\\Downloads\\\\Task-manger-app-master\\\\Task-manger-app-master\\\\frontend\\\\task-manager\\\\src\\\\context\\\\tasks\\\\TaskState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport taskContext from './taskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskState = props => {\n  _s();\n\n  const host = \"http://localhost\";\n  const [tasks, setTasks] = useState([]); //Fetching all tasks\n\n  const getTasks = async list_id => {\n    const response = await fetch(`${host}/lists/${list_id}/gettasks`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const json = await response.json(); // console.log(json);\n\n    setTasks(json);\n  }; // Adding a new task\n\n\n  const addTask = async (listId, description, dueDate) => {\n    const response = await fetch(`${host}/lists/${listId}/addtask`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        description,\n        dueDate\n      })\n    });\n    const task = await response.json(); // console.log(task);\n\n    setTasks(tasks.concat(task));\n  }; // Editing the status of the task\n\n\n  const editTaskStatus = async taskId => {\n    try {\n      const response = await fetch(`${host}/lists/updatetaskstatus/${taskId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          isCompleted: true\n        })\n      });\n      const json = await response.json(); //Applying the changes in the frontend\n\n      const newTasks = JSON.parse(JSON.stringify(tasks));\n\n      for (let i = 0; i < newTasks.length; i++) {\n        let ele = newTasks[i];\n\n        if (ele._id === taskId) {\n          newTasks[i].isCompleted = true;\n          break;\n        }\n      }\n\n      setTasks(newTasks);\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Editing the task\n\n\n  const editTask = async (list_id, task_id, description, dueDate) => {\n    try {\n      const response = await fetch(`${host}/lists/${list_id}/updatetask/${task_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          description,\n          dueDate\n        })\n      });\n      const json = await response.json();\n      console.log(json);\n      let newTasks = JSON.parse(JSON.stringify(tasks));\n\n      for (let i = 0; i < newTasks.length; i++) {\n        const ele = newTasks[i];\n\n        if (ele._id === task_id) {\n          newTasks[i].description = description;\n          newTasks[i].dueDate = dueDate;\n          break;\n        }\n      }\n\n      setTasks(newTasks);\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Deleting a task\n\n\n  const deleteTask = async taskId => {\n    try {\n      const response = await fetch(`${host}/lists/deletetask/${taskId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const json = await response.json(); //Applying the changes in the frontend\n\n      const newTasks = tasks.filter(task => {\n        return task._id !== taskId;\n      }); // using filter() function of javascript\n\n      setTasks(newTasks);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(taskContext.Provider, {\n    value: {\n      tasks,\n      getTasks,\n      addTask,\n      editTaskStatus,\n      deleteTask,\n      editTask\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskState, \"+34uIVDBalDkucWnJ7Aj1Xxb0MA=\");\n\n_c = TaskState;\nexport default TaskState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"names":["React","useState","taskContext","TaskState","props","host","tasks","setTasks","getTasks","list_id","response","fetch","method","headers","json","addTask","listId","description","dueDate","body","JSON","stringify","task","concat","editTaskStatus","taskId","isCompleted","newTasks","parse","i","length","ele","_id","error","console","log","editTask","task_id","deleteTask","filter","children"],"sources":["C:/Users/yeshw/Downloads/Task-manger-app-master/Task-manger-app-master/frontend/task-manager/src/context/tasks/TaskState.js"],"sourcesContent":["import React, { useState } from 'react'\nimport taskContext from './taskContext'\n\nconst TaskState = (props) => {\n    const host = \"http://localhost\";\n    const [tasks, setTasks] = useState([]);\n\n    //Fetching all tasks\n\n    const getTasks = async (list_id) => {\n\n\n        const response = await fetch(`${host}/lists/${list_id}/gettasks`, {\n            method: 'GET',\n\n            headers: {\n                'Content-Type': 'application/json',\n            },\n\n        });\n        const json = await response.json();\n        // console.log(json);\n        setTasks(json);\n\n    }\n\n    // Adding a new task\n\n    const addTask = async (listId, description, dueDate) => {\n\n        const response = await fetch(`${host}/lists/${listId}/addtask`, {\n            method: 'POST',\n\n            headers: {\n                'Content-Type': 'application/json',\n            },\n\n            body: JSON.stringify({ description, dueDate }),\n\n        });\n        const task = await response.json();\n        // console.log(task);\n        setTasks(tasks.concat(task));\n\n    }\n\n\n    // Editing the status of the task\n\n    const editTaskStatus = async (taskId) => {\n        try {\n\n            const response = await fetch(`${host}/lists/updatetaskstatus/${taskId}`, {\n                method: 'PATCH',\n\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n\n                body: JSON.stringify({ isCompleted: true }),\n\n            });\n            const json = await response.json();\n\n\n            //Applying the changes in the frontend\n\n            const newTasks = JSON.parse(JSON.stringify(tasks));\n            for (let i = 0; i < newTasks.length; i++) {\n                let ele = newTasks[i];\n                if (ele._id === taskId) {\n                    newTasks[i].isCompleted = true;\n                    break;\n                }\n            }\n            setTasks(newTasks);\n\n        } catch (error) {\n            console.log(error);\n        }\n\n\n    }\n\n    //Editing the task\n\n    const editTask = async (list_id,task_id ,description,dueDate) => {\n\n        try {\n\n            const response = await fetch(`${host}/lists/${list_id}/updatetask/${task_id}`, {\n                method: 'PUT',\n\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n\n                body: JSON.stringify({ description,dueDate }),\n\n            });\n            const json = await response.json();\n            console.log(json);\n\n            let newTasks = JSON.parse(JSON.stringify(tasks))\n            for (let i = 0; i < newTasks.length; i++) {\n                const ele = newTasks[i];\n                if (ele._id === task_id) {  \n                    newTasks[i].description = description;\n                    newTasks[i].dueDate = dueDate;\n                    break;\n                }\n\n            }\n            setTasks(newTasks);\n\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n    //Deleting a task\n\n    const deleteTask = async (taskId) => {\n\n        try {\n\n            const response = await fetch(`${host}/lists/deletetask/${taskId}`, {\n                method: 'DELETE',\n\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n            const json = await response.json();\n\n             //Applying the changes in the frontend\n\n            const newTasks = tasks.filter((task) => { return task._id !== taskId })  // using filter() function of javascript\n            setTasks(newTasks);\n\n        } catch (error) {\n            console.log(error);\n        }\n\n       \n\n\n\n    }\n\n    return (\n        <taskContext.Provider value={{ tasks, getTasks, addTask, editTaskStatus, deleteTask,editTask }}>\n            {props.children}\n        </taskContext.Provider>\n    )\n}\n\n\n\nexport default TaskState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EACzB,MAAMC,IAAI,GAAG,kBAAb;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CAFyB,CAIzB;;EAEA,MAAMO,QAAQ,GAAG,MAAOC,OAAP,IAAmB;IAGhC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,UAASI,OAAQ,WAA1B,EAAsC;MAC9DG,MAAM,EAAE,KADsD;MAG9DC,OAAO,EAAE;QACL,gBAAgB;MADX;IAHqD,CAAtC,CAA5B;IAQA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB,CAXgC,CAYhC;;IACAP,QAAQ,CAACO,IAAD,CAAR;EAEH,CAfD,CANyB,CAuBzB;;;EAEA,MAAMC,OAAO,GAAG,OAAOC,MAAP,EAAeC,WAAf,EAA4BC,OAA5B,KAAwC;IAEpD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,UAASW,MAAO,UAAzB,EAAoC;MAC5DJ,MAAM,EAAE,MADoD;MAG5DC,OAAO,EAAE;QACL,gBAAgB;MADX,CAHmD;MAO5DM,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEJ,WAAF;QAAeC;MAAf,CAAf;IAPsD,CAApC,CAA5B;IAUA,MAAMI,IAAI,GAAG,MAAMZ,QAAQ,CAACI,IAAT,EAAnB,CAZoD,CAapD;;IACAP,QAAQ,CAACD,KAAK,CAACiB,MAAN,CAAaD,IAAb,CAAD,CAAR;EAEH,CAhBD,CAzByB,CA4CzB;;;EAEA,MAAME,cAAc,GAAG,MAAOC,MAAP,IAAkB;IACrC,IAAI;MAEA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,2BAA0BoB,MAAO,EAA1C,EAA6C;QACrEb,MAAM,EAAE,OAD6D;QAGrEC,OAAO,EAAE;UACL,gBAAgB;QADX,CAH4D;QAOrEM,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UAAEK,WAAW,EAAE;QAAf,CAAf;MAP+D,CAA7C,CAA5B;MAUA,MAAMZ,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB,CAZA,CAeA;;MAEA,MAAMa,QAAQ,GAAGP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,SAAL,CAAef,KAAf,CAAX,CAAjB;;MACA,KAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;QACtC,IAAIE,GAAG,GAAGJ,QAAQ,CAACE,CAAD,CAAlB;;QACA,IAAIE,GAAG,CAACC,GAAJ,KAAYP,MAAhB,EAAwB;UACpBE,QAAQ,CAACE,CAAD,CAAR,CAAYH,WAAZ,GAA0B,IAA1B;UACA;QACH;MACJ;;MACDnB,QAAQ,CAACoB,QAAD,CAAR;IAEH,CA3BD,CA2BE,OAAOM,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EAGJ,CAjCD,CA9CyB,CAiFzB;;;EAEA,MAAMG,QAAQ,GAAG,OAAO3B,OAAP,EAAe4B,OAAf,EAAwBpB,WAAxB,EAAoCC,OAApC,KAAgD;IAE7D,IAAI;MAEA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,UAASI,OAAQ,eAAc4B,OAAQ,EAAhD,EAAmD;QAC3EzB,MAAM,EAAE,KADmE;QAG3EC,OAAO,EAAE;UACL,gBAAgB;QADX,CAHkE;QAO3EM,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UAAEJ,WAAF;UAAcC;QAAd,CAAf;MAPqE,CAAnD,CAA5B;MAUA,MAAMJ,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB;MACAoB,OAAO,CAACC,GAAR,CAAYrB,IAAZ;MAEA,IAAIa,QAAQ,GAAGP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,SAAL,CAAef,KAAf,CAAX,CAAf;;MACA,KAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;QACtC,MAAME,GAAG,GAAGJ,QAAQ,CAACE,CAAD,CAApB;;QACA,IAAIE,GAAG,CAACC,GAAJ,KAAYK,OAAhB,EAAyB;UACrBV,QAAQ,CAACE,CAAD,CAAR,CAAYZ,WAAZ,GAA0BA,WAA1B;UACAU,QAAQ,CAACE,CAAD,CAAR,CAAYX,OAAZ,GAAsBA,OAAtB;UACA;QACH;MAEJ;;MACDX,QAAQ,CAACoB,QAAD,CAAR;IAEH,CA3BD,CA2BE,OAAOM,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EAEJ,CAjCD,CAnFyB,CAsHzB;;;EAEA,MAAMK,UAAU,GAAG,MAAOb,MAAP,IAAkB;IAEjC,IAAI;MAEA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,qBAAoBoB,MAAO,EAApC,EAAuC;QAC/Db,MAAM,EAAE,QADuD;QAG/DC,OAAO,EAAE;UACL,gBAAgB;QADX;MAHsD,CAAvC,CAA5B;MAOA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB,CATA,CAWC;;MAED,MAAMa,QAAQ,GAAGrB,KAAK,CAACiC,MAAN,CAAcjB,IAAD,IAAU;QAAE,OAAOA,IAAI,CAACU,GAAL,KAAaP,MAApB;MAA4B,CAArD,CAAjB,CAbA,CAayE;;MACzElB,QAAQ,CAACoB,QAAD,CAAR;IAEH,CAhBD,CAgBE,OAAOM,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EAMJ,CA1BD;;EA4BA,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAAE3B,KAAF;MAASE,QAAT;MAAmBO,OAAnB;MAA4BS,cAA5B;MAA4Cc,UAA5C;MAAuDF;IAAvD,CAA7B;IAAA,UACKhC,KAAK,CAACoC;EADX;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAzJD;;GAAMrC,S;;KAAAA,S;AA6JN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}